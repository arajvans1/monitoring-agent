hana_memory_usage:
  backend: sql
  command: |
    SELECT HOST, 
           ROUND(PHYSICAL_MEMORY_SIZE/1024/1024/1024, 2) AS TOTAL_MEMORY_GB,
           ROUND(USED_PHYSICAL_MEMORY/1024/1024/1024, 2) AS USED_MEMORY_GB,
           ROUND((USED_PHYSICAL_MEMORY/PHYSICAL_MEMORY_SIZE)*100, 2) AS MEMORY_USAGE_PCT
    FROM SYS.M_HOST_RESOURCE_UTILIZATION
  required: []
  params: {}

hana_active_sessions:  # Fixed: removed extra indentation
  backend: sql
  command: |
    SELECT CONNECTION_ID, 
           USER_NAME, 
           CLIENT_IP,
           APPLICATION_NAME,
           CONNECTION_STATUS
    FROM SYS.M_CONNECTIONS
    WHERE CONNECTION_STATUS = 'RUNNING'
  required: []
  params: {}

hana_top_tables_by_memory:  # Fixed: removed extra indentation
  backend: sql
  command: |
    SELECT SCHEMA_NAME,
           TABLE_NAME, 
           ROUND(MEMORY_SIZE_IN_MAIN/1024/1024, 2) AS SIZE_MB
    FROM SYS.M_CS_TABLES
    WHERE MEMORY_SIZE_IN_MAIN > 0
    ORDER BY SIZE_MB DESC
    LIMIT 10
  required: []
  params: {}

# Additional correct HANA SQL commands
hana_database_size:
  backend: sql
  command: |
    SELECT DATABASE_NAME,
           ROUND(USED_SIZE/1024/1024/1024, 2) AS USED_SIZE_GB,
           ROUND(ALLOCATED_SIZE/1024/1024/1024, 2) AS ALLOCATED_SIZE_GB
    FROM SYS.M_DATABASES
  required: []
  params: {}

hana_service_memory:
  backend: sql
  command: |
    SELECT HOST,
           SERVICE_NAME,
           ROUND(PHYSICAL_MEMORY_SIZE/1024/1024, 2) AS PHYSICAL_MEMORY_MB,
           ROUND(USED_PHYSICAL_MEMORY/1024/1024, 2) AS USED_MEMORY_MB
    FROM SYS.M_SERVICE_MEMORY
    ORDER BY USED_MEMORY_MB DESC
  required: []
  params: {}

hana_disk_usage:
  backend: sql
  command: |
    SELECT HOST,
           USAGE_TYPE,
           FILE_SYSTEM_USED_SIZE,
           FILE_SYSTEM_TOTAL_SIZE,
           ROUND((FILE_SYSTEM_USED_SIZE/FILE_SYSTEM_TOTAL_SIZE)*100, 2) AS USAGE_PCT
    FROM SYS.M_DISK_USAGE
    ORDER BY USAGE_PCT DESC
  required: []
  params: {}

hana_current_statements:
  backend: sql
  command: |
    SELECT CONNECTION_ID,
           STATEMENT_ID,
           USER_NAME,
           APPLICATION_NAME,
           STATEMENT_STATUS,
           LEFT(STATEMENT_STRING, 100) AS STATEMENT_PREVIEW
    FROM SYS.M_ACTIVE_STATEMENTS
    ORDER BY STATEMENT_ID DESC
    LIMIT {{.limit}}
  required: []
  params:
    limit: "10"

get_instance_list:
  command: |  # Fixed: added pipe for multiline
    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:SAPHostControl">
      <soapenv:Header/>
      <soapenv:Body>
        <urn:GetSystemInstanceList/>
      </soapenv:Body>
    </soapenv:Envelope>
  backend: "soap"
  required: []
  params: {}

get_process_list:
  command: |  # Fixed: added pipe for multiline
    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:SAPHostControl">
      <soapenv:Header/>
      <soapenv:Body>
        <urn:GetProcessList>
          <host>{{.host}}</host>
        </urn:GetProcessList>
      </soapenv:Body>
    </soapenv:Envelope>
  backend: "soap"
  required: []
  params: {}

disk_usage:
  command: "df -h"
  backend: "shell"
  required: []
  params: {}

check_http_status:
  command: "http://{{.host}}:{{.port}}/health"
  backend: "rest"
  required: ["host", "port"]
  params:
    port: "80"
    host: "localhost"  # Default host

github_user:
  command: "https://api.github.com/users/{{.username}}"
  backend: "rest"
  required: ["username"]
  params:
    username: "octocat"

# Get a random quote
random_quote:
  command: "https://api.quotable.io/random"
  backend: "rest"
  required: []
  params: {}

# test api
test_api:
  command: "https://jsonplaceholder.typicode.com/posts/{{.no}}"
  backend: "rest"
  required: ["no"]
  params:
    no: "1"

# fetch file information
fetch_file_info:
  command: "ls -lrt | grep load"
  backend: "shell"
  required: []
  params: {}

# OS System Monitoring Commands
system_uptime:
  command: "uptime"
  backend: "shell"
  required: []
  params: {}

memory_info:
  command: "free -h"
  backend: "shell"
  required: []
  params: {}

cpu_info:
  command: "top -bn1 | grep 'Cpu(s)' | head -1"
  backend: "shell"
  required: []
  params: {}

network_connections:
  command: "netstat -tuln"
  backend: "shell"
  required: []
  params: {}

running_processes:
  command: "ps aux | head -{{.lines}}"
  backend: "shell"
  required: []
  params:
    lines: "10"

disk_space:
  command: "df -h {{.path}}"
  backend: "shell"
  required: []
  params:
    path: "/"

check_port:
  command: "lsof -i :{{.port}}"
  backend: "shell"
  required: ["port"]
  params:
    port: "8080"

system_load:
  command: "cat /proc/loadavg"
  backend: "shell"
  required: []
  params: {}

last_logins:
  command: "last -n {{.count}}"
  backend: "shell"
  required: []
  params:
    count: "5"

check_service:
  command: "systemctl status {{.service}}"
  backend: "shell"
  required: ["service"]
  params:
    service: "ssh"

kernel_version:
  command: "uname -a"
  backend: "shell"
  required: []
  params: {}

environment_variables:
  command: "env | grep {{.var}}"
  backend: "shell"
  required: []
  params:
    var: "PATH"

find_large_files:
  command: "find {{.path}} -type f -size +{{.size}} -exec ls -lh {} \\; 2>/dev/null | head -{{.count}}"
  backend: "shell"
  required: []
  params:
    path: "/var/log"
    size: "10M"
    count: "5"
